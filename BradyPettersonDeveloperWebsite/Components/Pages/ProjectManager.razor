@page "/projectmanager"
@rendermode InteractiveServer

@using BradyPettersonDeveloperWebsite.Models
@using Microsoft.EntityFrameworkCore
@inject AppDbContext DbContext
@inject NavigationManager NavigationManager

<PageTitle>Project Manager</PageTitle>

<h3>Project Manager</h3>

<p>This page displays a list of projects. Click on a project name to edit its details.</p>

<button class="btn btn-success" @onclick="() => OpenProjectModal(0)">
    <i class="bi bi-plus-lg"></i> New Task
</button>

@if (Projects.Any()) {
    <table class="table table-striped">
        <thead>
            <tr>
                <th>ID</th>
                <th>Project Name</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var project in Projects) {
                <tr>
                    <td>
                        @project.Id
                    </td>
                    <td>
                        <button class="btn btn-link p-0" type="button" @onclick="() => OpenProjectModal(project)">
                            @project.Projectname
                        </button>
                    </td>
                    <td>@project.Description</td>
                </tr>
            }
        </tbody>
    </table>
}
else {
    <p>No projects found.</p>
}

<!-- Import the ProjectModal component -->
<ProjectModal @ref="projectModal" OnProjectSaved="HandleProjectSaved" />

@code {
    private ProjectModal? projectModal;

    public List<Project> Projects { get; set; } = new();

    protected override async Task OnInitializedAsync () {
        await LoadProjectsAsync();
    }

    private async Task LoadProjectsAsync () {
        Projects = await DbContext.Projects
            .OrderBy(p => p.Id) // Ensure projects are ordered by Id
            .ToListAsync();
    }

    private void OpenProjectModal (Project project) {
        projectModal?.Show(project);
    }

    private void OpenProjectModal (int projectid) {
        projectModal?.Show(projectid);
    }

    private async Task HandleProjectSaved () {
        await LoadProjectsAsync();
        StateHasChanged();
    }
}
