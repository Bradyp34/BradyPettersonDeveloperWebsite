@page "/tasklist"
@rendermode InteractiveServer

@using BradyPettersonDeveloperWebsite.Models
@using Microsoft.EntityFrameworkCore
@inject AppDbContext DbContext
@inject NavigationManager NavigationManager

<PageTitle>Task List</PageTitle>

<h3>Task List</h3>

<p>This page displays a task board for a selected project. Select a project from the dropdown to view the tasks for that project.</p>

<select class="form-select mb-3" @onchange="OnProjectSelected">
    <option value="">-- Select a Project --</option>
    @foreach (var project in Projects) {
        <option value="@project.Id">@project.Projectname</option>
    }
</select>

@if (SelectedProject != null) {
    <div class="kanban-board">
        <h4 class="text-center mb-4">@SelectedProject.Projectname - Task Board</h4>
        <div class="d-flex justify-content-center mt-4">
            <button class="btn btn-success" @onclick="() => OpenTaskModal(selectedProjectId ?? 0)">
                <i class="bi bi-plus-lg"></i> New Task
            </button>
        </div>
        <br>
        <div class="kanban-columns">
            @RenderKanbanColumn("To Do", ToDoTasks, "text-primary")
            @RenderKanbanColumn("In Progress", InProgressTasks, "text-warning")
            @RenderKanbanColumn("In Review", InReviewTasks, "text-info")
            @RenderKanbanColumn("Done", DoneTasks, "text-success")
        </div>
    </div>
}
else {
    <p>Please select a project to view the task board.</p>
}

<!-- Import the modal with the callback -->
<TaskModal @ref="taskModal" OnTaskSaved="HandleTaskSaved" />

@code {
    private TaskModal? taskModal;

    public List<Project> Projects { get; set; } = new();
    private List<Projecttask> Tasks { get; set; } = new();

    private int? selectedProjectId { get; set; }
    private Project? SelectedProject { get; set; }

    private List<Projecttask> ToDoTasks => Tasks.Where(t => t.Stage == 1).ToList();
    private List<Projecttask> InProgressTasks => Tasks.Where(t => t.Stage == 2).ToList();
    private List<Projecttask> InReviewTasks => Tasks.Where(t => t.Stage == 3).ToList();
    private List<Projecttask> DoneTasks => Tasks.Where(t => t.Stage == 4).ToList();

    protected override async Task OnInitializedAsync () {
        await LoadProjectsAsync();
    }

    private async Task LoadProjectsAsync () {
        Projects = await DbContext.Projects.ToListAsync();
    }

    private async Task OnProjectSelected (ChangeEventArgs e) {
        if (int.TryParse(e.Value?.ToString(), out var projectId)) {
            selectedProjectId = projectId;
            SelectedProject = Projects.FirstOrDefault(p => p.Id == projectId);
            await LoadTasksAsync(projectId);
        }
        else {
            selectedProjectId = null;
            SelectedProject = null;
            Tasks.Clear();
        }

        StateHasChanged();
    }

    private async Task LoadTasksAsync (int projectId) {
        Tasks = await DbContext.Projecttasks
        .Where(t => t.Projectid == projectId)
        .ToListAsync();
    }

    private void OpenTaskModal (Projecttask task) {
        taskModal?.Show(task);
    }

    private void OpenTaskModal (int projectId) {
        taskModal?.Show(projectId);
    }

    private async Task HandleTaskSaved () {
        if (selectedProjectId.HasValue) {
            await LoadTasksAsync(selectedProjectId.Value);
            StateHasChanged();
        }
    }

    private RenderFragment RenderKanbanColumn (string title, List<Projecttask> tasks, string headerClass) => @<div class="kanban-column">
        <h5 class="@headerClass text-center mb-3">@title</h5>
        <div class="kanban-column-content">
            @if (tasks.Any()){
                @foreach (var task in tasks){
                    <button class="btn btn-outline-secondary mb-2 w-100" @onclick="() => OpenTaskModal(task)">
                        @task.Taskname
                    </button>
                }
            }
        else
        {
            <div class="kanban-card empty-task">No tasks</div>
        }
        </div>
    </div>;
}
