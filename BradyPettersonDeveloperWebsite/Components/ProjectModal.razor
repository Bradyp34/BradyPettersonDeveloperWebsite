@rendermode InteractiveServer
@inject AppDbContext DbContext
@using BradyPettersonDeveloperWebsite.Models
@using Microsoft.EntityFrameworkCore

<div class="modal-backdrop" style="@(IsVisible ? "display: flex;" : "display: none;")">
    <div class="modal-box">
        <div class="modal-header">
            @if (Project.Id != 0) {
                <h5 class="modal-title">Edit Project</h5>
            }
            else {
                <h5 class="modal-title">New Project</h5>
            }
            <button type="button" class="btn-close" @onclick="CloseModal">&times;</button>
        </div>
        <div class="modal-body">
            @if (Project.Id != 0) {
                <h1>ID: @Project.Id</h1>
            }
            <h3>@Project.Projectname</h3>

            <div class="mb-3">
                <label for="projectName" class="form-label
                ">Project Name</label>
                <input type="text" class="form-control" id="projectName" @bind="Project.Projectname" />
            </div>

            <div class="mb-3">
                <label for="projectDescription" class="form-label">Description</label>
                <textarea class="form-control" id="projectDescription" @bind="Project.Description"></textarea>
            </div>

            <div class="mb-3">
                <button class="btn btn-primary" id="saveButton" @onclick="SaveChanges">Save</button>
            </div>
        </div>
    </div>
</div>


@code {
    [Parameter] 
    public EventCallback<Project> OnProjectSaved { get; set; }

    public bool IsVisible { get; set; }

    public Project Project { get; set; } = new Project();

    public List<Siteuser> SiteUsers { get; set; } = new List<Siteuser>();
    public List<Projectuser> ProjectUsers { get; set; } = new List<Projectuser>();

    public async void Show (int projectId) {
        @if (projectId != 0) {
            Project = await DbContext.Projects.FindAsync(projectId) ?? new Project();
            if (Project.Id == 0) {
                CloseModal();
            }
        }
        else {
            Project = new Project();
        }
        await LoadProjectUsersAsync();
        await LoadSiteUsersAsync();

        IsVisible = true;
        StateHasChanged();
    }

    public async void Show (Project project) {
        await LoadProjectUsersAsync();
        await LoadSiteUsersAsync();
        Project = project;
        IsVisible = true;
        StateHasChanged();
    }

    public void CloseModal () {
        IsVisible = false;
        StateHasChanged();
    }

    public async Task LoadProjectUsersAsync () {
        try {
            ProjectUsers = await DbContext.Projectusers.ToListAsync();
        }
        catch (Exception ex) {
            Console.WriteLine($"Error loading project users: {ex.Message}");
        }
    }

    public async Task LoadSiteUsersAsync () {
        try {
            SiteUsers = await DbContext.Siteusers.ToListAsync();
        }
        catch (Exception ex) {
            Console.WriteLine($"Error loading site users: {ex.Message}");
        }
    }

    public async Task SaveChanges() {
        if (Project.Id != 0) {
            DbContext.Projects.Update(Project);
        }
        else {
            DbContext.Projects.Add(Project);
        }

        await DbContext.SaveChangesAsync();

        IsVisible = false;

        await OnProjectSaved.InvokeAsync(Project);
    }
}
